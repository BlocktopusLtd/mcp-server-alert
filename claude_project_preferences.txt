# Claude Project Preferences for mcp-server-alert

## File Editing Preferences
- When editing files, show ONLY the diff of changes (git diff format)
- Never output full file contents or complete methods
- Use the edit_file function which returns diffs automatically
- For new files, show the complete content once, then only diffs for subsequent edits

## Git Workflow
- Branch naming: Use prefixes (feature/, bugfix/, refactor/) + descriptive-name
- Always branch from main unless explicitly instructed otherwise
- Create a feature branch at the start of each chat session
- Commit after EVERY interaction/prompt response
- Never commit directly to main/master
- Always ensure main is up-to-date before creating new branches (git pull)

## Commit Message Format
```
<type>: <summary of change>

User request: <brief summary of what user asked>
Changes made: <what Claude did>
Files affected: <list of files>

Context: <any relevant technical details>
```

Types: feat, fix, docs, style, refactor, test, chore

## Auto-Commit Behavior
- Commit immediately before passing control back to user
- Include conversation context in every commit message
- This creates an audit trail and rollback points
- Each commit represents one interaction/change request

## PR Process
- IMPORTANT: Always push the feature branch before creating a PR
- Repository owner: BlocktopusLtd
- When feature is complete, create PR to main
- Always use squash merge method
- Enable auto-delete branch after merge
- Include summary of all changes and conversations
- Add testing instructions
- Update PR description before merging if changes were made
- PR title should be concise but descriptive
- Always provide the PR URL after creation (e.g., https://github.com/org/repo/pull/123)
- After merging PR, always checkout back to main branch

## Safety Practices
- Show diff preview before making changes
- Confirm current branch before edits
- Note commit hash for important checkpoints
- Test changes if test suite is available
- Always pull latest main before creating new branches
- Check PR status/conflicts before merging

## Project-Specific Context
- This is an MCP (Model Context Protocol) server
- Provides alert/notification capabilities
- TypeScript-based implementation
- Integrates with Claude and other AI assistants

## Development Patterns
- Follow TypeScript best practices
- Maintain MCP protocol compliance
- Consider async/await patterns for server operations
- Keep error handling robust

## Available MCP Servers
- filesystem: For file operations in C:/dev/mcp-server-alert
- git: For version control operations
- github: For PR creation and GitHub integration (when configured)

## GitHub Account Context
- When referring to "blocktopus" for GitHub operations, this means the BlocktopusLtd account
- Repository origin: https://github.com/BlocktopusLtd/mcp-server-alert

## Communication Style
- Be concise in responses
- Focus on diffs and changes, not full code listings
- Explain what changed and why
- Always mention which files are affected
- Provide status updates during workflow (e.g., "Branch created", "PR #X opened")
- Always include clickable PR URL when PR is created
- Summarize completed workflow steps at the end

## Problem Solving
- When something doesn't work after multiple attempts, search the web for solutions
- Look for community-reported issues and proven workarounds
- MCP servers and TypeScript have many specific quirks that are well-documented online

## File Identification Workflow
- Before making changes, identify relevant files in the src/ directory
- Always confirm with user if additional files might need changes
- Use directory structure to understand file dependencies and relationships
- Provide status updates during workflow (e.g., "Branch created", "PR #X opened")
- Always include clickable PR URL when PR is created
- Summarize completed workflow steps at the end

## IMPORTANT: Sound Notifications (Always Required)
- **ALWAYS play a sound when responding** - this is not optional
- Play "notification" sound when answering any prompt
- Play a celebratory melody when merging a PR (C5-E5-G5-C6-G5-E5-C5-E5-G5-C6 at 140 BPM)
- Use volume 1.0 (100%) for ALL sounds - needs to get user's attention
- If sounds fail to play, mention the failure but continue workflow
- This should be done at the END of every response

## Workflow Optimizations
- If making multiple related changes in one session, group them logically in commits
- Use git stash if switching contexts mid-work
- Clean up local branches after PR merge (git branch -d)
- Use descriptive branch names that indicate the work being done
- Consider using conventional branch prefixes:
  - feature/ for new features
  - bugfix/ or fix/ for bug fixes
  - refactor/ for code refactoring
  - docs/ for documentation updates
  - chore/ for maintenance tasks
- Add PR labels if available (enhancement, bug, documentation, etc.)
- Link related issues in PR description when applicable
